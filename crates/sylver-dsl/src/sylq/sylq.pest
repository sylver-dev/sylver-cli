keyword = @{ "match" | "when" | "is" | "null" | "any" | "all" | "no" }
integer = @{ "-"? ~ ASCII_DIGIT+ }
placeholder = @{ "_" }
identifier = @{ !(keyword ~ !(LETTER)) ~ (LOWERCASE_LETTER | UPPERCASE_LETTER) ~ (LOWERCASE_LETTER | UPPERCASE_LETTER | "_" | ASCII_DIGIT)* }
special_identifier = @{ "$" ~ (LOWERCASE_LETTER | UPPERCASE_LETTER | "_" | ASCII_DIGIT)+ }
list_kind = { "List" ~ "<" ~ identifier ~ ">" }

query = { "match" ~ query_pattern ~ EOI }

query_pattern = { query_pattern_full | query_pattern_simple }
    query_pattern_simple = { node_pattern }
    query_pattern_full = { node_pattern ~ "when" ~ expr }

braced_query_pattern = { query_pattern_simple |  ("{" ~ query_pattern ~ "}") }

node_pattern = { node_pattern_pre_binding | node_pattern_post_binding }
    node_pattern_pre_binding = { identifier ~ "@" ~ node_pattern_val }
    node_pattern_post_binding = { node_pattern_val ~ identifier? }
    node_pattern_val = { node_pattern_vals | node_pattern_vals_parenthesized }
    node_pattern_vals = _{ node_pattern_val_raw ~ ("|" ~ node_pattern_val_raw)* }
    node_pattern_vals_parenthesized = _{ "(" ~ node_pattern_vals ~ ")" }
    node_pattern_val_raw = { node_pattern_val_kind ~ node_pattern_val_fields? }
    node_pattern_val_kind = _{ list_kind | identifier | placeholder }
    node_pattern_val_fields = _{ "(" ~ node_pattern_val_field ~ ("," ~ node_pattern_val_field)* ~ ")"}
    node_pattern_val_field = { node_pattern_val_field_desc ~ ":" ~ (query_pattern | string_literal) }
    node_pattern_val_field_desc = _{ identifier | node_pattern_val_field_index }
    node_pattern_val_field_index = { "[" ~ integer ~ "]" }

expr = { bin_log_op | cmp_expr }
    primary_op = { term | atomic_expr }

    term = { atomic_expr ~ (dot_call_suffix | dot_access_suffix | array_index_suffix)* }
      dot_access_suffix = { dot_op ~ identifier }
      array_index_suffix = { "[" ~ expr ~ "]" }
      dot_call_suffix = { dot_op ~ call }
      dot_op = _{ dot_op_simple | dot_op_safe }
        dot_op_simple = { "." }
        dot_op_safe = { "?." }

    call = { identifier ~ "(" ~ call_args? ~ ")" }
      call_args = { arg ~ ("," ~ arg)* }
      arg = _{ named_arg | unnamed_arg }
      named_arg = { identifier ~ "=" ~ expr }
      unnamed_arg = { expr }

    atomic_expr = {
        not_expr
      | array_quant_expr
      | special_identifier
      | identifier
      | integer
      | null
      | string_literal
      | regex_literal
      | "(" ~ expr ~ ")"
    }

    not_expr = { "!" ~ primary_op }

    regex_literal = { "`" ~ regex_literal_content ~ "`"}
        regex_literal_content = { (("\\`") | (!"`" ~ ANY))* }

    string_literal = { double_string_literal | simple_string_literal }
        double_string_literal = _{ "\"" ~ (("\\\"") | (!"\"" ~ ANY))* ~ "\"" }
        simple_string_literal = _{ "\'" ~ (("\\\'") | (!"\'" ~ ANY))* ~ "\'" }

    null = { "null" }

    bin_log_op = { cmp_expr ~ log_op ~ expr }
        log_op = { "&&" | "||" }

    cmp_expr = { bin_op | is_expr | array_index | primary_op }
        bin_op = { primary_op ~ op ~ cmp_expr }
            op = { "<=" | "<" | ">=" | ">" | "==" | "!=" }

    is_expr = { primary_op ~ "is" ~ braced_query_pattern }

    array_quant_expr = { array_quant_quant ~ array_quant_origin ~ "match" ~ braced_query_pattern }
        array_quant_quant = { "no" | "any" | "all" }
        array_quant_origin = { primary_op }

    array_index = { primary_op ~ "[" ~ expr ~ "]" }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" | NEWLINE }
